// 这段 MFC 示例源代码演示如何使用 MFC Microsoft Office Fluent 用户界面 
// (“Fluent UI”)。该示例仅供参考，
// 用以补充《Microsoft 基础类参考》和 
// MFC C++ 库软件随附的相关电子文档。  
// 复制、使用或分发 Fluent UI 的许可条款是单独提供的。  
// 若要了解有关 Fluent UI 许可计划的详细信息，请访问 
// http://go.microsoft.com/fwlink/?LinkId=238214。
//
// 版权所有(C) Microsoft Corporation
// 保留所有权利。

// CAD.cpp : 定义应用程序的类行为。
//

#include "stdafx.h"
#include "afxwinappex.h"
#include "afxdialogex.h"
#include "CAD.h"
#include "MainFrm.h"
#include "CLANCHOOSE.h"
#include "LANSAVEBOX.h"
#include "CADDoc.h"
#include "CADView.h"
#include <iostream>
#ifdef _DEBUG
#define new DEBUG_NEW
#endif

using namespace std;
// CCADApp

BEGIN_MESSAGE_MAP(CCADApp, CWinAppEx)
	ON_COMMAND(ID_APP_ABOUT, &CCADApp::OnAppAbout)
	// 基于文件的标准文档命令
	// 标准打印设置命令
	ON_COMMAND(ID_FILE_PRINT_SETUP, &CWinAppEx::OnFilePrintSetup)
	//ON_COMMAND(ID_CHINESE, &CCADApp::OnChinese)
	//ON_COMMAND(ID_ENGLISH, &CCADApp::OnEnglish)
	ON_BN_CLICKED(ID_CHINESE, &CCADApp::OnBnClickedChinese)
	ON_BN_CLICKED(ID_ENGLISH, &CCADApp::OnBnClickedEnglish)
	ON_COMMAND(ID_SW_LANG, &CCADApp::OnSwLan)
END_MESSAGE_MAP()

CString GetModuleDir_cad();
// CCADApp 构造

CCADApp::CCADApp()
{
	// 支持重新启动管理器
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_ALL_ASPECTS;
#ifdef _MANAGED
	// 如果应用程序是利用公共语言运行时支持(/clr)构建的，则: 
	//     1) 必须有此附加设置，“重新启动管理器”支持才能正常工作。
	//     2) 在您的项目中，您必须按照生成顺序向 System.Windows.Forms 添加引用。
	System::Windows::Forms::Application::SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode::ThrowException);
#endif

	// TODO: 将以下应用程序 ID 字符串替换为唯一的 ID 字符串；建议的字符串格式
	//为 CompanyName.ProductName.SubProduct.VersionInformation
	SetAppID(_T("CAD.AppID.NoVersion"));

	// TODO: 在此处添加构造代码，
	// 将所有重要的初始化放置在 InitInstance 中
}

// 唯一的一个 CCADApp 对象

CCADApp theApp;


// CCADApp 初始化

BOOL CCADApp::InitInstance()
{
	// 如果一个运行在 Windows XP 上的应用程序清单指定要
	// 使用 ComCtl32.dll 版本 6 或更高版本来启用可视化方式，
	//则需要 InitCommonControlsEx()。  否则，将无法创建窗口。
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 将它设置为包括所有要在应用程序中使用的
	// 公共控件类。
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinAppEx::InitInstance();
	//g_bStart = GetStart();
	g_bFirst = GetFirst();
	if (!g_bFirst)
	{
		CLANCHOOSE Dlg;
		Dlg.DoModal();
		SetFirst(TRUE);
	}

	//SetFirst(TRUE);
	g_bEnglish = GetLang();
	//CString g_strCurrPath = GetModuleDir_cad();
	if (!g_bEnglish)
	{
		m_hLangDLL = ::LoadLibrary(_T("3D-Chinese.dll"));
	}
	else
	{
		m_hLangDLL = LoadLibrary(_T("3D-English.dll"));
	}

	AfxSetResourceHandle(m_hLangDLL);
	EnableTaskbarInteraction(TRUE);

	// 初始化 OLE 库
	if (!AfxOleInit())
	{
		AfxMessageBox(IDP_OLE_INIT_FAILED);
		return FALSE;
	}

	AfxEnableControlContainer();



	// 使用 RichEdit 控件需要 AfxInitRichEdit2()	
	// AfxInitRichEdit2();

	// 标准初始化
	// 如果未使用这些功能并希望减小
	// 最终可执行文件的大小，则应移除下列
	// 不需要的特定初始化例程
	// 更改用于存储设置的注册表项
	// TODO: 应适当修改该字符串，
	// 例如修改为公司或组织名
	SetRegistryKey(_T("应用程序向导生成的本地应用程序"));
	LoadStdProfileSettings(4);  // 加载标准 INI 文件选项(包括 MRU)


	InitContextMenuManager();

	InitKeyboardManager();

	InitTooltipManager();
	CMFCToolTipInfo ttParams;
	ttParams.m_bVislManagerTheme = TRUE;
	theApp.GetTooltipManager()->SetTooltipParams(AFX_TOOLTIP_TYPE_ALL,
		RUNTIME_CLASS(CMFCToolTipCtrl), &ttParams);

	// 注册应用程序的文档模板。  文档模板
	// 将用作文档、框架窗口和视图之间的连接
	CSingleDocTemplate* pDocTemplate;
	pDocTemplate = new CSingleDocTemplate(
		IDR_MAINFRAME,
		RUNTIME_CLASS(CCADDoc),
		RUNTIME_CLASS(CMainFrame),       // 主 SDI 框架窗口
		RUNTIME_CLASS(CCADView));
	if (!pDocTemplate)
		return FALSE;
	AddDocTemplate(pDocTemplate);

	// 分析标准 shell 命令、DDE、打开文件操作的命令行
	CCommandLineInfo cmdInfo;
	ParseCommandLine(cmdInfo);

	// 调度在命令行中指定的命令。  如果
	// 用 /RegServer、/Register、/Unregserver 或 /Unregister 启动应用程序，则返回 FALSE。
	//char proA = ProcessShellCommand(cmdInfo);
	if (!ProcessShellCommand(cmdInfo))
		return FALSE;

	// 唯一的一个窗口已初始化，因此显示它并对其进行更新
	m_pMainWnd->ShowWindow(SW_SHOW);
	m_pMainWnd->UpdateWindow();

	// register draw functions which are used in GP.dll
	if (regDrawPt(viDrawPoint) != ERSUCSS ||
		regDrawLin(viDrawLine) != ERSUCSS ||
		regDrawPoly(viDrawPolyline) != ERSUCSS ||
		regDrawTris(viDrawTris) != ERSUCSS ||
		regDrawQuas(viDrawQuas) != ERSUCSS)
		return FALSE;

	// 单位默认为mm
	gpSetTol(1.0e-5) ;
	gpSetAng(1.0e-11) ;
	double pre[3] ;
	pre[0] = 1. ;
	pre[1] = 0.2 ;
	pre[2] = 10. ;
	gpSetPre(pre) ;
	double tra[3] ;
	tra[0] = 1. ;
	tra[1] = 0.2 ;
	tra[2] = 25. ;
	gpSetTra(tra) ;
	double dsc[3] ;
	dsc[0] = 2.5 ;
	dsc[1] = 0.2 ;
	dsc[2] = 10. ;
	gpSetDsc(dsc);
	//gpSetFit(0.001) ;
	double tes[3] ;
	tes[0] = 1. ;
	tes[1] = 1.047197551196597 ;
	tes[2] = 0.001 ;
	gpSetTes(tes) ;

	return TRUE;
}

int CCADApp::ExitInstance()
{
	//TODO: 处理可能已添加的附加资源
	AfxOleTerm(FALSE);
	//清理加载资源并重启进程
	//BOOL bStart = GetStart();
	if (m_hLangDLL)
	{
		FreeLibrary(m_hLangDLL);
	}

	/*if (bStart)
	{
		STARTUPINFO StartupInfo = { 0 };
		PROCESS_INFORMATION ProcessInfo;

		StartupInfo.cb = sizeof(STARTUPINFO);
		char Path[256];
		GetModuleFileName(NULL, (LPWSTR)(LPCTSTR)Path, 250);
		ShellExecute(NULL, _T(""), (LPWSTR)(LPCTSTR)Path, NULL, NULL, SW_SHOWNORMAL);
		//CreateProcess(NULL, (LPWSTR)(LPCTSTR)Path, NULL, NULL, FALSE, 0, NULL, NULL, &StartupInfo, &ProcessInfo);
	}*/
	//SetStart(FALSE);
	//g_bRestart = FALSE;
	return CWinAppEx::ExitInstance();
}

// CCADApp 消息处理程序


// 用于应用程序“关于”菜单项的 CAboutDlg 对话框

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 对话框数据
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 支持

// 实现
protected:
	DECLARE_MESSAGE_MAP()
public:
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
	ON_WM_PAINT()
END_MESSAGE_MAP()

// 用于运行对话框的应用程序命令
void CCADApp::OnAppAbout()
{
	CAboutDlg aboutDlg;
	aboutDlg.DoModal();
}

// CCADApp 自定义加载/保存方法

void CCADApp::PreLoadState()
{
	BOOL bNameValid;
	CString strName;
	bNameValid = strName.LoadString(IDS_EDIT_MENU);
	ASSERT(bNameValid);
	GetContextMenuManager()->AddMenu(strName, IDR_POPUP_EDIT);
}

void CCADApp::LoadCustomState()
{
}

void CCADApp::SaveCustomState()
{
}

CString GetModuleDir_cad()
{
	HMODULE module = GetModuleHandle(0);
	char pFileName[MAX_PATH];
	GetModuleFileNameA(module, pFileName, MAX_PATH);

	CString csFullPath(pFileName);
	int nPos = csFullPath.ReverseFind(_T('\\'));
	if (nPos < 0)
		return CString("");
	else
		return csFullPath.Left(nPos);
}

// CCADApp 消息处理程序

void CCADApp::SetLang(BOOL bEnglish)
{
	CString strTemp;
	strTemp.Format(_T("%d"), bEnglish);

	CString g_strCurrPath = GetModuleDir_cad();
	WritePrivateProfileString(_T("English"), _T("bEnglish"), strTemp, g_strCurrPath + _T("\\setlang.ini"));
}

void CCADApp::SetStart(BOOL bStart)
{
	CString strTemp;
	strTemp.Format(_T("%d"), bStart);

	CString g_strCurrPath = GetModuleDir_cad();
	WritePrivateProfileString(_T("Start"), _T("bStart"), strTemp, g_strCurrPath + _T("\\setlang.ini"));
}

void CCADApp::SetFirst(BOOL bFirst)
{
	CString strTemp;
	strTemp.Format(_T("%d"), bFirst);

	CString g_strCurrPath = GetModuleDir_cad();
	WritePrivateProfileString(_T("First"), _T("bFirst"), strTemp, g_strCurrPath + _T("\\setlang.ini"));
}

BOOL CCADApp::GetLang(void)
{
	CString g_strCurrPath = GetModuleDir_cad();
	BOOL bEnglish = GetPrivateProfileInt(_T("English"), _T("bEnglish"), 0, g_strCurrPath + _T("\\setlang.ini"));

	return bEnglish;
}

BOOL CCADApp::GetStart(void)
{
	CString g_strCurrPath = GetModuleDir_cad();
	BOOL bStart = GetPrivateProfileInt(_T("Start"), _T("bStart"), 0, g_strCurrPath + _T("\\setlang.ini"));

	return bStart;
}

BOOL CCADApp::GetFirst(void)
{
	CString g_strCurrPath = GetModuleDir_cad();
	BOOL bFirst = GetPrivateProfileInt(_T("First"), _T("bFirst"), 0, g_strCurrPath + _T("\\setlang.ini"));

	return bFirst;
}

/*
void CCADApp::OnChinese()
{
	// TODO: 在此添加命令处理程序代码
	int iRet;
	if (g_bEnglish)
	{
		
		// 英文版的OK 与 Cancel
		iRet = MessageBoxEx(AfxGetApp()->GetMainWnd()->GetSafeHwnd(), _T("Really change to Chinese version?"), _T("Information"), MB_OKCANCEL | MB_ICONINFORMATION, MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US));
	}
	else
	{
		iRet = MessageBox(AfxGetApp()->GetMainWnd()->GetSafeHwnd(), _T("已经是中文版本。"), _T("提示"), MB_OKCANCEL | MB_ICONINFORMATION);
		return;
	}

	if (iRet == IDCANCEL)
	{
		return;
	}

	SetLang(FALSE);
	SetStart(TRUE);
	//g_bRestart = TRUE;
	//PostMessage(WM_CLOSE, 0, 0);
	PostMessage(AfxGetMainWnd()->GetSafeHwnd(), WM_CLOSE, 0, 0);
}

void CCADApp::OnEnglish()
{
	// TODO: 在此添加命令处理程序代码
	int iRet;

	if (!g_bEnglish)
	{
		iRet = MessageBox(AfxGetApp()->GetMainWnd()->GetSafeHwnd(), _T("确定切换到英文版本?"), _T("提示"), MB_OKCANCEL | MB_ICONINFORMATION);
	}
	else
	{
		iRet = MessageBoxEx(AfxGetApp()->GetMainWnd()->GetSafeHwnd(), _T("It's English version now."), _T("Information"), MB_OKCANCEL | MB_ICONINFORMATION, MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US));

		return;
	}

	if (iRet == IDCANCEL)
	{
		return;
	}

	SetLang(TRUE);
	//g_bRestart = TRUE;
	SetStart(TRUE);
	PostMessage(AfxGetMainWnd()->GetSafeHwnd(), WM_CLOSE, 0, 0);
}*/

void CCADApp::OnBnClickedChinese()
{
	// TODO: 在此添加控件通知处理程序代码
	SetLang(FALSE);
	PostMessage(AfxGetMainWnd()->GetSafeHwnd(), WM_CLOSE, 0, 0);
}

void CCADApp::OnBnClickedEnglish()
{
	// TODO: 在此添加控件通知处理程序代码
	SetLang(TRUE);
	PostMessage(AfxGetMainWnd()->GetSafeHwnd(), WM_CLOSE, 0, 0);

}

void CCADApp::OnSwLan()
{
	// TODO: 在此添加命令处理程序代码
	//重新置成未启动过的状态
	SetFirst(FALSE);
	CLANSAVEBOX dlg;
	dlg.DoModal();
}

// nt add 2019/3/24
void CCADApp::AddToRecentFileList(LPCTSTR lpszPathName)
{
	// TODO: 在此添加专用代码和/或调用基类
	if( _tcsstr(lpszPathName, _T(".swk")) != NULL ||
		_tcsstr(lpszPathName, _T(".SWK")) != NULL )
		CWinAppEx::AddToRecentFileList(lpszPathName);
	return ;
}
